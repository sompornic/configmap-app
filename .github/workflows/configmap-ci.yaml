name: Trigger Helm Update Workflow

on:
  push:
    branches:
      - main  # ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠ push ‡πÑ‡∏õ‡∏¢‡∏±‡∏á branch main

jobs:
  update-helm-configmap:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout configmap-app repository
        uses: actions/checkout@v3

      - name: Read configmap.json
        id: read_config
        run: |
          CONFIG_JSON=$(cat config-app/configmap.json | jq -c .)
          echo "CONFIG_JSON<<EOF" >> $GITHUB_ENV
          echo "$CONFIG_JSON" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Update Helm values.yaml via GitHub API
        env:
          GH_TOKEN: ${{ secrets.PAT_TOKEN }}
          REPO_OWNER: "sompornic"
          REPO_NAME: "helm-app"
          FILE_PATH: "node-be/values.yaml"
          BRANCH: "main"
          CONFIG_PAYLOAD: ${{ env.CONFIG_JSON }}
        run: |
          echo "Fetching current values.yaml from GitHub API"

          # üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å GitHub API
          RESPONSE=$(curl -s -H "Authorization: token $GH_TOKEN" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/$FILE_PATH")

          # üìå ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ SHA ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          FILE_SHA=$(echo "$RESPONSE" | jq -r '.sha')

          # üìå ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ content ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡πâ‡∏ß decode base64
          FILE_CONTENT=$(echo "$RESPONSE" | jq -r '.content' | base64 -d)
          echo "$FILE_CONTENT" > values.yaml

          # ‚úÖ ‡πÉ‡∏ä‡πâ `yq` ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï `config-iot.json` ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô JSON Object
          yq eval '.config.configMap.config."config-iot.json" = {"appName": "ac-paragon", "projectName": "PARAGON", "coreVersion": "2.7.0", "namespace": "ac-paragon", "cert": {"certPath": "./ssl/smaf-partner-cert.pem", "keyPath": "./ssl/smaf-partner-key.pem"}, "port": {"httpPort": "8801"}, "mongo": {"useDB": "", "options": {"readPreference": "secondaryPreferred", "connectTimeoutMS": 10000, "maxPoolSize": 20, "minPoolSize": 1, "maxIdleTimeMS": 10000, "replicaSet": "replSet01"}}, "cache": {"useCache": false}, "plugin": {"cache": {}, "log": {"cedaLog": {"formatLog": {"detail": {"action": "#PARAM.action", "actionDescription": "#PARAM.actionDescription", "appName": "#CONF.projectName", "broker": "#HEAD.mfaf-broker", "channel": "#HEAD.mfaf-channel", "componentName": "#CONF.appName", "componentVersion": "#CONF.coreVersion", "device": "#HEAD.mfaf-device", "dependency": "#PARAM.dependency", "instance": "#PARAM.instance", "level": "info", "message": "#PARAM.message", "originateServiceName": "Event source", "public": "#HEAD.mfaf-public", "recordName": ["[", "#REQ.method", "]-", "#REQ.url"], "recordType": "#PARAM.recordType", "sessionId": "#HEAD.mfaf-session", "subAction": "#PARAM.subAction", "timestamp": "#PARAM.timestamp", "transactionId": "#HEAD.mfaf-transaction||#HEAD.nsb-transaction", "useCase": "#HEAD.mfaf-usecase", "useCaseStep": "#HEAD.mfaf-usecasestep", "user": "#HEAD.mfaf-user", "responseTime": ""}, "summary": {"appName": "#CONF.projectName", "appResult": "#PARAM.appResult", "appResultCode": "#PARAM.appResultCode", "appResultType": "#PARAM.appResultType", "broker": "#HEAD.mfaf-broker", "channel": "#HEAD.mfaf-channel", "componentName": "#CONF.appName", "componentVersion": "#CONF.coreVersion", "dateTime": "#PARAM.dateTime", "device": "#HEAD.mfaf-device", "instance": "#PARAM.instance", "level": "info", "originateServiceName": "Event source", "public": "#HEAD.mfaf-public", "recordName": ["[", "#REQ.method", "]-", "#REQ.url"], "recordType": "#PARAM.recordType", "sessionId": "#HEAD.mfaf-session", "severity": "#PARAM.severity", "stack": "#PARAM.stack", "transactionId": "#HEAD.mfaf-transaction", "useCase": "#HEAD.mfaf-usecase", "useCaseStep": "#HEAD.mfaf-usecasestep", "user": "#HEAD.mfaf-user"}, "error": {"action": "#PARAM.action", "actionDescription": "#PARAM.actionDescription", "appName": "#CONF.projectName", "broker": "#HEAD.mfaf-broker", "channel": "#HEAD.mfaf-channel", "componentName": "#CONF.appName", "componentVersion": "#CONF.coreVersion", "device": "#HEAD.mfaf-device", "dependency": "#PARAM.dependency", "instance": "#PARAM.instance", "level": "error", "message": "#PARAM.message", "originateServiceName": "Event source", "public": "#HEAD.mfaf-public", "recordName": ["[", "#REQ.method", "]-", "#REQ.url"], "recordType": "#PARAM.recordType", "sessionId": "#HEAD.mfaf-session", "subAction": "#PARAM.subAction", "timestamp": "#PARAM.timestamp", "transactionId": "#HEAD.mfaf-transaction", "useCase": "#HEAD.mfaf-usecase", "useCaseStep": "#HEAD.mfaf-usecasestep", "user": "#HEAD.mfaf-user", "stack": "#PARAM.stack"}}}}}' values.yaml > updated_values.yaml

          # üî• Debug ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß
          echo "Updated values.yaml:"
          cat updated_values.yaml

          # Encode ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô Base64
          ENCODED_CONTENT=$(base64 -w 0 updated_values.yaml)

          # ‡∏™‡∏£‡πâ‡∏≤‡∏á JSON Payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GitHub API
          PAYLOAD=$(jq -n \
            --arg path "$FILE_PATH" \
            --arg message "Update config-iot.json in values.yaml" \
            --arg content "$ENCODED_CONTENT" \
            --arg sha "$FILE_SHA" \
            '{ path: $path, message: $message, content: $content, sha: $sha }')

          # Debug Payload
          echo "Payload to GitHub API:"
          echo "$PAYLOAD"

          # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏õ‡∏¢‡∏±‡∏á GitHub
          curl -X PUT -H "Authorization: token $GH_TOKEN" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/contents/$FILE_PATH"

          echo "‚úÖ Updated values.yaml successfully"